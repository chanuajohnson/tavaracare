
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables instead of hardcoded values
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;
const CURRENT_ENV = import.meta.env.VITE_ENV || 'development';

// Improved error handling and logging for initialization
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error(`
    ⚠️ Missing Supabase credentials ⚠️
    
    Required environment variables not found:
    ${!SUPABASE_URL ? '- VITE_SUPABASE_URL' : ''}
    ${!SUPABASE_PUBLISHABLE_KEY ? '- VITE_SUPABASE_ANON_KEY' : ''}
    
    For local development:
    1. Copy .env.development.example to .env.development
    2. Copy .env.production.example to .env.production.local
    3. Fill in your Supabase values
    
    For deployment:
    Ensure GitHub Secrets are correctly configured.
  `);
}

// Better logging for environment detection
console.log(`Supabase Client Initialization (${CURRENT_ENV})`);
console.log(`Supabase URL: ${SUPABASE_URL?.substring(0, 16)}...`);
console.log(`Environment: ${CURRENT_ENV}`);

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY, 
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storageKey: `supabase.auth.token.${CURRENT_ENV}`,
    },
    global: {
      headers: {
        'x-client-env': CURRENT_ENV,
        'x-app-version': '1.0', // Helps with debugging client/server mismatches
      },
    },
    // Added debug mode for development
    db: {
      schema: 'public',
    },
  }
);

// Add a helper function to identify the current environment
export const getCurrentEnvironment = (): 'development' | 'preview' | 'production' => {
  return CURRENT_ENV as 'development' | 'preview' | 'production' || 'development';
};

// Log the active environment and URL for debugging
console.log(`Active environment: ${getCurrentEnvironment()}`);
console.log(`Using Supabase project: ${SUPABASE_URL}`);

// Helper to detect development vs production environment
export const isDevelopment = (): boolean => {
  return getCurrentEnvironment() === 'development';
};

export const isProduction = (): boolean => {
  return getCurrentEnvironment() === 'production';
};

// Function to help debug environment issues
export const getEnvironmentInfo = () => {
  return {
    environment: getCurrentEnvironment(),
    supabaseUrl: SUPABASE_URL,
    isDev: isDevelopment(),
    isProd: isProduction(),
    projectId: SUPABASE_URL?.split('.')[0]?.split('//')[1] || 'unknown',
    clientHeaders: {
      'x-client-env': CURRENT_ENV,
      'x-app-version': '1.0',
    }
  };
};

// Helper function to verify schema compatibility
export const verifySchemaCompatibility = async (): Promise<{
  compatible: boolean;
  missingColumns: string[];
  tables: string[];
}> => {
  try {
    // List of columns to check for proper functionality
    const requiredColumns = [
      { table: 'profiles', column: 'onboarding_progress' },
      { table: 'profiles', column: 'role' },
      { table: 'profiles', column: 'professional_type' }
    ];
    
    const missingColumns: string[] = [];
    const tables: string[] = [];
    
    // Check if tables and columns exist
    for (const { table, column } of requiredColumns) {
      const { data, error } = await supabase
        .from('profiles')
        .select(column)
        .limit(1);
      
      if (error) {
        if (error.message.includes('column') && error.message.includes('does not exist')) {
          missingColumns.push(`${table}.${column}`);
        }
      } else {
        if (!tables.includes(table)) {
          tables.push(table);
        }
      }
    }
    
    return {
      compatible: missingColumns.length === 0,
      missingColumns,
      tables
    };
  } catch (err) {
    console.error('Error verifying schema compatibility:', err);
    return {
      compatible: false,
      missingColumns: ['Error checking compatibility'],
      tables: []
    };
  }
};
